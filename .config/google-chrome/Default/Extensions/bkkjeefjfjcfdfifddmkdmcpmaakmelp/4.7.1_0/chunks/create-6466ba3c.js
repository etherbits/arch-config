import { r as r$1, i as i$1, t as t$1 } from './transframe-provider-57421007.js';

var i=class{constructor(s){t$1(this,"_isConnected"),t$1(this,"_messageHandler"),t$1(this,"_messageHandlerWrapper"),t$1(this,"_options"),this._options=s,this._isConnected=!1,this._messageHandler=()=>{},this._messageHandlerWrapper=e=>{this._options?.allowedOrigins&&!this._options.allowedOrigins.includes(e.origin)||this._messageHandler(e.data);};}get isConnected(){return this._isConnected}connect(){window.addEventListener("message",this._messageHandlerWrapper),this._isConnected=!0;}disconnect(){window.removeEventListener("message",this._messageHandlerWrapper),this._isConnected=!1;}sendMessage(e){let s;if(s=this._options?.providerWindow?this._options.providerWindow:this._options?.useDirectParent?window.parent:window.top,!s)throw new Error("No parent window to send message to");this._options?.allowedOrigins?this._options.allowedOrigins.forEach((n=>{s.postMessage(e,n);})):s.postMessage(e,"*");}onMessage(e){this._messageHandler=e;}},t=class{constructor(s){t$1(this,"_isListening",!1),t$1(this,"_messageHandler",(()=>{})),t$1(this,"_frameIdMap",new Map),t$1(this,"_options"),t$1(this,"_messageHandlerWrapper",(e=>{if(this._options?.allowedOrigins&&!this._options.allowedOrigins.includes(e.origin))return;const s=e.source;if(!s)throw console.log("event source is null",e,window.location.href),new Error("Somehow the event source is null");const n={fromId:this._frameIdMap.get(e.source),event:e};this._messageHandler(e.data,(n=>{s.postMessage(n,e.origin);}),n);})),this._options=s;}get isListening(){return this._isListening}listen(){window.addEventListener("message",this._messageHandlerWrapper),this._isListening=!0;}close(){window.removeEventListener("message",this._messageHandlerWrapper),this._isListening=!1;}onMessage(e){this._messageHandler=e;}registerFrame(e,s){if(!e?.contentWindow)throw new Error("Frame must have a contentWindow");this._frameIdMap.set(e.contentWindow,s);}};function a(e){if(!("window"in globalThis))throw new Error('Transframe: global "window" not available. Cannot initialize a provider.');return new r$1(new t(e),e)}function r(e){if(!("window"in globalThis))throw new Error('Transframe: global "window" not available. Cannot initialize a consumer.');return new i$1(new i(e),e)}function o(e){return {contentWindow:e}}var d=class{constructor(){t$1(this,"_isConnected",!1),t$1(this,"_messageHandler",(()=>{})),t$1(this,"_messageHandlerWrapper"),this._messageHandler=()=>{},this._messageHandlerWrapper=e=>{try{"string"==typeof e.data&&e.data.startsWith("{")?this._messageHandler(JSON.parse(e.data)):this._messageHandler(e.data);}catch{}};}get isConnected(){return this._isConnected}connect(){window.addEventListener?.("message",this._messageHandlerWrapper,!0),this._isConnected=!0;}disconnect(){window.removeEventListener?.("message",this._messageHandlerWrapper,!0),this._isConnected=!1;}sendMessage(e){"string"!=typeof e&&(e=JSON.stringify(e)),window.ReactNativeWebView?.postMessage(e);}onMessage(e){this._messageHandler=e;}};function g(e){return new i$1(new d,e)}

export { a, g, o, r };
